# ------------------------------------------------------------------------------------------------
# Package Audio FX - Ver. 1.1
# Descrizione: suoni su Alexa per Halloween, Natale e compleanni
# ------------------------------------------------------------------------------------------------
# Autore: Henrik Sozzi
# sito: https://henriksozzi.it
# ------------------------------------------------------------------------------------------------
# CHANGELOG
# Ver. 1.0 - 29/10/2022
#   - Prima versione "as-is", creata di fretta per me stesso.
# Ver. 1.1 - 10/11/2023
#   - Aggiunto helper e logica per spegnere le luci, accenderne alcune rosse e riprodurre il suono per
#     poi ripristinare la situazione precedente (usato per Halloween)
# ------------------------------------------------------------------------------------------------
# Distribuito con licenza: CC BY-NC-SA 4.0
# Formato leggibile da un essere umano: https://creativecommons.org/licenses/by-nc-sa/4.0/deed.it
# Formato per gli avvocati: https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode
# ------------------------------------------------------------------------------------------------
input_boolean:
  audio_fx_auto:
    name: Effetti sonori automatici
    icon: mdi:volume-high
  audio_fx_lights:
    name: Spegni le luci a pian terreno quando buio
    icon: mdi:lightbulb-off

input_select:
  audio_fx:
    name: Effetti sonori Alexa
    options:
      - "No FX"
      - "Halloween"
      - "Christmas"
      - "Birthday"
    icon: mdi:volume-high

input_number:
  audio_fx_improbability:
    name: Improbabilità effetti audio
    min: 1
    max: 10
    step: 1

  audio_fx_volume:
    name: Volume effetti audio
    min: 0.1
    max: 1
    step: 0.1

automation:
  # Alle 6 di mattina, se "Effetti sonori automatici" è attivo, viene attivato o disattivato l'effetto sonoro dell'occasione
  - id: 0a7ad8ba-4044-46bc-842d-7a9730828fed
    alias: Alexa - Logica - Attivazione effetti sonori automatici
    trigger:
      - platform: time
        at: "06:00"
    condition:
      - alias: "Se attivati effetti sonori automatici"
        condition: state
        entity_id: input_boolean.audio_fx_auto
        state: "on"
    action:
      - alias: "A seconda del giorno"
        choose:
        # Inizio Halloween
        - conditions: "{{(now().day, now().month) == (28, 10)}}"
          sequence:
            - service: input_select.select_option
              target:
                entity_id: input_select.audio_fx
              data:
                option: Halloween
        # Fine Halloween
        - conditions: "{{(now().day, now().month) == (3, 11)}}"
          sequence:
            - service: input_select.select_option
              target:
                entity_id: input_select.audio_fx
              data:
                option: "No FX"
        # Inizio Natale
        - conditions: "{{(now().day, now().month) == (22, 12)}}"
          sequence:
            - service: input_select.select_option
              target:
                entity_id: input_select.audio_fx
              data:
                option: Christmas
        # Fine Natale
        - conditions: "{{(now().day, now().month) == (27, 12)}}"
          sequence:
            - service: input_select.select_option
              target:
                entity_id: input_select.audio_fx
              data:
                option: "No FX"
        # Inizio compleanno
        - conditions: "{{(now().day, now().month) in [(22, 2), (8, 5), (20, 6), (16, 21)]}}"
          sequence:
            - service: input_select.select_option
              target:
                entity_id: input_select.audio_fx
              data:
                option: Birthday
        # Fine compleanno
        - conditions: "{{(now().day, now().month) in [(23, 2), (9, 5), (21, 6), (17, 21)]}}"
          sequence:
            - service: input_select.select_option
              target:
                entity_id: input_select.audio_fx
              data:
                option: "No FX"

  # Riproduce un suono random su una Alexa random, una volta ogni x minuti (mediamente, a seconda della probabilità selezionata)
  - id: 9622c881-8a69-477f-9dc6-ec61a949dfca
    alias: Alexa - Notifica - Audio FX random
    trigger:
      - platform: time_pattern
        hours: "*"
        minutes: "/1"
        seconds: "30"
    condition:
      - "{{ range(states('input_number.audio_fx_improbability') | int(0)) | random == 0 }}" # Proabilità variabile di riprodurre un suono
    action:
      - variables:
          alexa_device: >
            {% set alexa_devices = expand(states.group.common_alexa) | map(attribute='entity_id') | list %}
            {% set rnd = range(alexa_devices | count) | random %}
            {{ alexa_devices[rnd] }}
      - service: script.audio_fx
        data:
          alexa_target: "{{alexa_device}}"
  
  # Riproduce un suono random su un dispositivo Alexa prossimo al sensore di movimento quando sollecitato
  - id: c94c813c-09b7-4b36-a8ed-bcca05d571e8
    alias: Alexa - Notifica - Audio FX su trigger
    trigger:
      - platform: state
        entity_id: binary_sensor.motion_scala_occupancy
        id: "scala"
        to: "on"
        not_from:
          - "unknown"
          - "unavailable"
        enabled: false
      - platform: state
        entity_id: binary_sensor.motion_corridoio
        id: "corridoio"
        to: "on"
        not_from:
          - "unknown"
          - "unavailable"
      - platform: state
        entity_id: binary_sensor.pian_terreno_occupancy
        id: "pian_terreno"
        to: "on"
        not_from:
          - "unknown"
          - "unavailable"
    action:
      - variables:
          alexa_device: >
            {% set devices = {"scala": "media_player.primo_piano", 
                              "corridoio": "media_player.primo_piano", 
                              "pian_terreno": "media_player.pian_terreno"}%}
            {% if trigger.id in devices %}
              {{ devices[trigger.id]}}
            {% else %}
              none
            {% endif %}
      - if: "{{ not alexa_device is none }}"
        then:
          - service: script.audio_fx
            data:
              alexa_target: "{{alexa_device}}"

script:
  # Riproduce un suono sul dispositivo alexa specificato, se nessuno è a letto e se c'è qualcuno a casa
  audio_fx:
    alias: "Riproduci suono casuale sul media_player specificato"
    fields:
      alexa_target:
        name: "Alexa target"
        description: "Alexa device target"
        selector:
          entity:
            integration: alexa_media
            domain: media_player
        example: "media_player.first_floor_alexa"
    sequence:
      - condition:
          - alias: "Qualcuno a casa?"
            condition: state
            entity_id: binary_sensor.anyone_at_home
            state: "on"
          - condition: not
            conditions:
              - alias: "Selezionato nessun effetto audio"
                condition: state
                entity_id: input_select.audio_fx
                state: "No FX"
              - alias: "Antonella a letto"
                condition: state
                entity_id: binary_sensor.letto_antonella_occupato
                state: "on"
              - alias: "Henrik a letto"
                condition: state
                entity_id: binary_sensor.letto_henrik_occupato
                state: "on"
              - alias: "Erica a letto"
                condition: state
                entity_id: binary_sensor.letto_erica_occupato
                state: "on"
              - alias: "Ilaria a letto"
                condition: state
                entity_id: binary_sensor.letto_ilaria_occupato
                state: "on"
      - variables:
          fx_type: "{{states('input_select.audio_fx') | default('No FX')}}"
          fx: >
            {% if fx_type == 'Halloween' %}
              <audio src="soundbank://soundlibrary/horror/horror_{{"{:0>2}".format(range(1, 16) | random)}}"/>
            {% elif fx_type == 'Christmas' %}
              <audio src="soundbank://soundlibrary/holidays/christmas/christmas_{{"{:0>2}".format(range(1, 6) | random)}}"/>
            {% elif fx_type == 'Birthday' %}
              <audio src="soundbank://soundlibrary/bell/chimes/chimes_{{"{:0>2}".format(range(1, 15) | random)}}"/>
            {% else %}
              <audio src="soundbank://soundlibrary/animals/amzn_sfx_cat_meow_1x_{{"{:0>2}".format(range(1, 3) | random)}}"/>
            {% endif %}
          # Se riproduco su pian terreno valuto, in base alla luce ambientale, se spegnere le luci e riaccenderle dopo il suono
          lights_off: "{{ is_state('input_boolean.audio_fx_lights', 'on') and alexa_target == 'media_player.pian_terreno' and is_state('binary_sensor.illuminazione_sole', 'off')}}"
      # Se il dispositivo Alexa non sta riproducendo già qualcosa
      - alias: "Se il dispositivo Alexa non sta riproducendo qualcosa"
        condition: template
        value_template: "{{ states(alexa_target) in ['standby', 'paused'] }}"
      # Se devo spegnere le luci
      - if: "{{ lights_off }}"
        then:
          - alias: "Salvo la scena del pian terreno prima di spegnere"
            service: scene.create
            data:
              scene_id: pian_terreno_backup
              snapshot_entities:
                - light.luce_cucina
                - light.tavolo_1
                - light.tavolo_2
                - light.tavolo_3
                - light.luce_cappa
                - light.soffitto_soggiorno
                - light.faretti_soggiorno
                - light.lampada_a_terra
                - light.luce_tv
          - alias: "Corrimano in modalità halloween_fx"
            service: select.select_option
            data:
              option: "HalloweenFX"
            target:
              entity_id: select.wled_corrimano_preset
          - service: light.turn_on
            target:
              entity_id:
                - light.luce_tv
            data:
              color_name: red
          - service: light.turn_off
            target:
              entity_id:
                - light.luce_cucina
                - light.tavolo_1
                - light.tavolo_2
                - light.tavolo_3
                - light.luce_cappa
                - light.soffitto_soggiorno
                - light.faretti_soggiorno
                - light.lampada_a_terra
      # Riproduco il suono!
      - alias: "Riproduce il suono"
        service: script.multinotify
        data:
          message: '{{fx}}'
          alexa_target: "{{alexa_target}}"
          alexa_type: tts
          alexa_volume: "{{ states('input_number.audio_fx_volume') | float(0.6) }}"
      # Se avevo spento le luci: attendo qualche secondo e le riaccendo
      - if: "{{ lights_off }}"
        then:
          - delay: "00:00:02"
          - alias: "Ripristino scena luci precedente"
            service: scene.turn_on
            data:
              transition: 2
            target:
              entity_id: scene.pian_terreno_backup
          - alias: "Spengo il corrimano"
            service: light.turn_off
            target:
              entity_id: light.wled_corrimano